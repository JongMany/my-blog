name: Deploy to GitHub Pages (MFE selective)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            shell:
              - 'apps/shell/**'
            blog:
              - 'apps/blog/**'
            portfolio:
              - 'apps/portfolio/**'
            resume:
              - 'apps/resume/**'
            packages:
              - 'packages/**'
            infra:
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - 'turbo.json'
              - 'scripts/**'
              - 'package.json'
              - '.github/workflows/**'

      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - run: pnpm -w install --frozen-lockfile

      # 캐시버스터: remoteEntry.js?v=<sha>
      - run: echo "VITE_BUILD_ID=${{ github.sha }}" >> $GITHUB_ENV

      # Turbo 원격 캐시(선택) — 있으면 훨씬 빨라짐
      # - name: Setup turbo remote cache
      #   run: |
      #     echo "TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}" >> $GITHUB_ENV
      #     echo "TURBO_TEAM=${{ secrets.TURBO_TEAM }}" >> $GITHUB_ENV

      - name: Decide build scope
        id: scope
        run: |
          ALL="${{ steps.changes.outputs.packages == 'true' || steps.changes.outputs.infra == 'true' }}"
          echo "all_changed=$ALL" >> $GITHUB_OUTPUT
          echo "shell=${{ steps.changes.outputs.shell }}" >> $GITHUB_OUTPUT
          echo "blog=${{ steps.changes.outputs.blog }}" >> $GITHUB_OUTPUT
          echo "portfolio=${{ steps.changes.outputs.portfolio }}" >> $GITHUB_OUTPUT
          echo "resume=${{ steps.changes.outputs.resume }}" >> $GITHUB_OUTPUT

      # 핵심: turbo가 그래프/캐시를 이용해 "변경된 것만" 실제로 빌드.
      # 하지만 dist가 모두 필요하므로 커맨드는 전체 build를 호출합니다.
      # 변경 없던 앱의 산출물은 캐시에서 복원 → 빠름.
      - name: Build (turbo graph; only changed recompiled)
        run: pnpm -w turbo run build

      - name: Collect site (flat)
        run: node scripts/collect-ghp.js

      # 빠른 무결성 체크
      - name: Sanity check
        run: |
          test -f dist_ghp/.nojekyll
          test -f dist_ghp/index.html
          test -f dist_ghp/blog/assets/remoteEntry.js
          test -f dist_ghp/portfolio/assets/remoteEntry.js
          test -f dist_ghp/resume/assets/remoteEntry.js

      # 사람이 직접 내려받아 확인 가능
      - uses: actions/upload-artifact@v4
        with:
          name: dist_ghp-${{ github.sha }}
          path: dist_ghp
          if-no-files-found: error
          retention-days: 7

      # Pages 배포용
      - uses: actions/upload-pages-artifact@v3
        with:
          path: dist_ghp

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
